---
interface Props {
  title: string;
  description?: string;
}

const { title, description = "Nostr BCH - Decentralized social networking powered by Bitcoin Cash" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script is:inline>
      // Theme initialization script - runs before page render
      (function() {
        function getThemePreference() {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        
        const isDark = getThemePreference() === 'dark';
        document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
        
        if (typeof localStorage !== 'undefined') {
          const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('dark')
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
          });
          observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
        }
      })();
    </script>
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <slot />
  </body>
</html>

<style is:global>
  html {
    scroll-behavior: smooth;
  }
  
  body {
    font-family: 'Inter', system-ui, sans-serif;
  }
</style>